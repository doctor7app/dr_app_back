// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Patients.Infrastructure.Persistence;

#nullable disable

namespace Patients.Infrastructure.Migrations
{
    [DbContext(typeof(PatientDbContext))]
    partial class PatientDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Patients.Domain.Models.Adresse", b =>
                {
                    b.Property<Guid>("AdresseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("AdditionalInformation")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("FkIdPatient")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Provence")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Street")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("AdresseId");

                    b.HasIndex("FkIdPatient");

                    b.HasIndex("PatientId");

                    b.ToTable("Adresse", "Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.Contact", b =>
                {
                    b.Property<Guid>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("FkIdPatient")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("ContactId");

                    b.HasIndex("FkIdPatient");

                    b.HasIndex("PatientId");

                    b.ToTable("Contact", "Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.MedicalInformation", b =>
                {
                    b.Property<Guid>("MedicalInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("FkIdPatient")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("Note")
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<Guid?>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("MedicalInformationId");

                    b.HasIndex("FkIdPatient");

                    b.HasIndex("PatientId");

                    b.ToTable("MedicalInformation", "Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.Patient", b =>
                {
                    b.Property<Guid>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("(NOW())");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DeathDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("HomeNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime?>("LastModified")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("(NOW())");

                    b.Property<Guid>("LastModifiedById")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("PatientId");

                    b.ToTable("Patient", "Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.Adresse", b =>
                {
                    b.HasOne("Patients.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("FkIdPatient")
                        .IsRequired();

                    b.HasOne("Patients.Domain.Models.Patient", null)
                        .WithMany("Adresses")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.Contact", b =>
                {
                    b.HasOne("Patients.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("FkIdPatient")
                        .IsRequired();

                    b.HasOne("Patients.Domain.Models.Patient", null)
                        .WithMany("Contacts")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.MedicalInformation", b =>
                {
                    b.HasOne("Patients.Domain.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("FkIdPatient")
                        .IsRequired();

                    b.HasOne("Patients.Domain.Models.Patient", null)
                        .WithMany("MedicalInformations")
                        .HasForeignKey("PatientId");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Patients.Domain.Models.Patient", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("Contacts");

                    b.Navigation("MedicalInformations");
                });
#pragma warning restore 612, 618
        }
    }
}
