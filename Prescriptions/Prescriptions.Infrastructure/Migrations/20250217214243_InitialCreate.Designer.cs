// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Prescriptions.Infrastructure.Persistence;

#nullable disable

namespace Prescriptions.Infrastructure.Migrations
{
    [DbContext(typeof(PrescriptionDbContext))]
    [Migration("20250217214243_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Prescriptions.Domain.Event.PrescriptionEvent", b =>
                {
                    b.Property<Guid>("PrescriptionEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EventDataJson")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("EventType")
                        .HasColumnType("integer");

                    b.Property<Guid>("FkDoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkPrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PrescriptionEventId");

                    b.HasIndex("FkPrescriptionId");

                    b.HasIndex("PrescriptionId");

                    b.ToTable("PrescriptionEvents");
                });

            modelBuilder.Entity("Prescriptions.Domain.Models.Prescription", b =>
                {
                    b.Property<Guid>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ConsultationType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FkConsultationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkDoctorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FkPatientId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("PrescriptionId");

                    b.ToTable("Prescriptions");
                });

            modelBuilder.Entity("Prescriptions.Domain.Models.PrescriptionItem", b =>
                {
                    b.Property<Guid>("PrescriptionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Dosage")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DrugName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Duration")
                        .HasColumnType("text");

                    b.Property<Guid>("FkPrescriptionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Frequency")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Instructions")
                        .HasColumnType("text");

                    b.Property<bool>("IsEssential")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrn")
                        .HasColumnType("boolean");

                    b.Property<string>("MealInstructions")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("MedicationType")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Route")
                        .HasColumnType("integer");

                    b.Property<string>("TimeOfDay")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("PrescriptionItemId");

                    b.HasIndex("FkPrescriptionId");

                    b.ToTable("PrescriptionItems");
                });

            modelBuilder.Entity("Prescriptions.Domain.Event.PrescriptionEvent", b =>
                {
                    b.HasOne("Prescriptions.Domain.Models.Prescription", null)
                        .WithMany()
                        .HasForeignKey("FkPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prescriptions.Domain.Models.Prescription", "Prescription")
                        .WithMany("DomainEvents")
                        .HasForeignKey("PrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Prescriptions.Domain.Models.PrescriptionItem", b =>
                {
                    b.HasOne("Prescriptions.Domain.Models.Prescription", "Prescription")
                        .WithMany("Items")
                        .HasForeignKey("FkPrescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");
                });

            modelBuilder.Entity("Prescriptions.Domain.Models.Prescription", b =>
                {
                    b.Navigation("DomainEvents");

                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
